# -*- coding: utf-8 -*-
"""Model_pre-trained-Xception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CFGbhDM7HSgL0Jr90rf25-kP5CuQXF5
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os
import cv2


##I extract images from the folders and create the dataset train_x



train_datagen = ImageDataGenerator(
        rescale=1./255,
        fill_mode='nearest',
        validation_split=0.2)

test_datagen = ImageDataGenerator(rescale=1 / 255.0)

train_generator = train_datagen.flow_from_directory(
        'D:/Project_DF/FaceRecogRefSoft/croppedfaces',
        target_size=(180, 180),
        batch_size=32,
        class_mode='categorical',
        subset='training') #set as training data

validation_generator = train_datagen.flow_from_directory(
    'D:/Project_DF/FaceRecogRefSoft/croppedfaces', #same directory as training data
    target_size=(180, 180),
    batch_size=32,
    class_mode='categorical',
    subset='validation',
    shuffle=False
    ) #set as validation data

test_generator = test_datagen.flow_from_directory(
    directory='D:/Project_DF/FaceRecogRefSoft/croppedfacesTest',
    target_size=(180, 180),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)



num_classes = 13

#######CREATION OF THE MODEL#################
#reference: https://keras.io/api/applications/
# create the base pre-trained model
base_model = tf.keras.applications.InceptionV3(include_top=False, weights="imagenet", input_shape=(180, 180, 3))


# Flatten the output layer for remove all of the dimensions except for one.
x = base_model.output
x = GlobalAveragePooling2D()(x)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)
# and a logistic layer --  we have 13 classes
predictions = Dense(num_classes, activation='softmax')(x)

# this is the model we will train
model = Model(inputs=base_model.input, outputs=predictions)


# first: train only the top layers (which were randomly initialized)
# i.e. freeze all convolutional InceptionV3 layers
for layer in base_model.layers:
    layer.trainable = False

# compile the model (should be done *after* setting layers to non-trainable)
model.compile(optimizer='adam', metrics=['accuracy'], loss='categorical_crossentropy')

#balance class weights for imbalanced classes
#https://stackoverflow.com/questions/42586475/is-it-possible-to-automatically-infer-the-class-weight-from-flow-from-directory

from collections import Counter

counter = Counter(validation_generator.classes) 
print("counter", counter)                         
max_val = float(max(counter.values()))       
class_weights = {class_id : max_val/num_images for class_id, num_images in counter.items()} 
print("class weights:", class_weights)


# train the model on the new data for a few epochs
history = model.fit(
      x=train_generator,
      epochs=2,
      validation_data=validation_generator,
      verbose=1,
      class_weight = class_weights)


# at this point, the top layers are well trained and we can start fine-tuning
# convolutional layers from inception V3. We will freeze the bottom N layers
# and train the remaining top layers.

# let's visualize layer names and layer indices to see how many layers
# we should freeze:
for i, layer in enumerate(base_model.layers):
   print(i, layer.name)


# we chose to train the top 2 inception blocks, i.e. we will freeze the first 249 layers and unfreeze the rest:
for layer in model.layers[:249]:
   layer.trainable = False
for layer in model.layers[249:]:
   layer.trainable = True

# we need to recompile the model for these modifications to take effect
# we use SGD with a low learning rate
from tensorflow.keras.optimizers import SGD
model.compile(optimizer=SGD(learning_rate=0.0001, momentum=0.9), loss='categorical_crossentropy', metrics=['accuracy'])

# we train our model again (this time fine-tuning the top 2 inception blocks
# alongside the top Dense layers)
history = model.fit(
      x=train_generator,
      epochs=5,
      validation_data=validation_generator,
      verbose=1,
      class_weight = class_weights)
#######END CREATION OF THE MODEL#################


# save the model
tf.keras.models.save_model(model, 'D:/Project_DF/Vception_model_mio.h5')


#Test the model with the test set and print confusion matrix
predict=model.predict_generator(test_generator)
y_classes = np.argmax(predict, axis=1)
print(test_generator.classes)

import seaborn as sn
import pandas as pd
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(test_generator.classes, y_classes)
print(cm)

class_names = ['Adam Sandler','Alyssa Milano', 'Bruce Willis', 'Denise Richards', 'George Clooney', 'Gwyneth Paltrow', 'Hugh Jackman', 'Jason Statham', 'Jennifer Love Hewitt', 'Lindsay Lohan', 'Mark Ruffalo', 'Robert Downey Jr', 'Will Smith']
df_cm = pd.DataFrame(cm, index = class_names, columns = class_names)

sn.set(font_scale=1.0) # Adjust to fit

plt.figure(figsize = (15,10))
sn.heatmap(df_cm, annot=True, cmap='Blues')
plt.axis([-0.5, 13.5, 13.5, -0.5])
plt.title('Confusion Matrix Test Set')
plt.xlabel('Predicted')
plt.ylabel('True')## Display the visualization of the Confusion Matrix.
plt.show()


