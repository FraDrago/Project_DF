# -*- coding: utf-8 -*-
"""Model_pre-trained-Xception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CFGbhDM7HSgL0Jr90rf25-kP5CuQXF5
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
from sklearn.utils import shuffle

from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model
from tensorflow.keras import layers
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os
import cv2

train_path="C:/Users/Franc/OneDrive/Desktop/PROGETTO/Dataset/PeopleFace"

##I extract images from the folders and create the dataset train_x

train_datagen = ImageDataGenerator(
        rescale=1./255,
        fill_mode='nearest',
        validation_split=0.2)

test_datagen = ImageDataGenerator(rescale=1 / 255.0)

train_generator = train_datagen.flow_from_directory(
        'D:/Project_DF/FaceRecogRefSoft/croppedfaces',
        target_size=(256, 256),
        batch_size=32,
        class_mode='categorical',
        subset='training') #set as training data

validation_generator = train_datagen.flow_from_directory(
    'D:/Project_DF/FaceRecogRefSoft/croppedfaces', #same directory as training data
    target_size=(256, 256),
    batch_size=32,
    class_mode='categorical',
    subset='validation',
    shuffle=False
    ) #set as validation data

test_generator = test_datagen.flow_from_directory(
    directory='D:/Project_DF/FaceRecogRefSoft/croppedfacesTest',
    target_size=(256, 256),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)

"""
class_names = {value:key for key, value in label_ids.items()}

plot_images(  #plot image in BGR format
    train_x[[1, 300, 600, 900, 1200, 1500, 1800, 2100, 2400]],
    train_y[[1, 300, 600, 900, 1200, 1500, 1800, 2100, 2400]],
    predictions=None,
    class_names=class_names
)
"""

num_classes = 13

#######CREATION OF THE MODEL#################
#reference: https://keras.io/api/applications/
# create the base pre-trained model
base_model = tf.keras.applications.InceptionV3(include_top=False, weights="imagenet", input_shape=(256, 256, 3))

# get the layer with output shape None 14 14
lastlayer = base_model.get_layer('mixed7')
old_output = lastlayer.output

# Flatten the output layer for remove all of the dimensions except for one.
x = layers.Flatten()(old_output)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)
# and a logistic layer --  we have 13 classes
predictions = Dense(num_classes, activation='softmax')(x)

# this is the model we will train
model = Model(inputs=base_model.input, outputs=predictions)

model.summary()
#######END CREATION OF THE MODEL#################

# first: train only the top layers (which were randomly initialized)
# i.e. freeze all convolutional InceptionV3 layers
for layer in base_model.layers:
    layer.trainable = False

# compile the model (should be done *after* setting layers to non-trainable)
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#balance class weights for imbalanced classes
#https://stackoverflow.com/questions/42586475/is-it-possible-to-automatically-infer-the-class-weight-from-flow-from-directory
from collections import Counter
newLabels = Counter()
for label in train_labels:
    for idx, key in enumerate(label):
         newLabels[idx]+=key
print("counter", newLabels)                             
max_val = float(max(newLabels.values()))  
class_weights = {class_id : max_val/num_images for class_id, num_images in newLabels.items()} 
print("class weights:", class_weights)


# train the model on the new data for a few epochs
history = model.fit(train_images, train_labels, 
                    batch_size = 32, epochs=10, validation_split = 0.2, class_weight=class_weights)


train_images, test_images, train_labels, test_labels
print("shape train_images: ", train_images.shape)
print("shape test_images: ", test_images.shape)
print("shape train_labels: ", train_labels.shape)
print("shape test_labels: ", test_labels.shape)
test_loss, test_acc = model.evaluate(test_images, test_labels)

print('Test accuracy:', test_acc)

print('Test loss:', test_loss)

print("test_images type: ", type(test_images))
print("test_labels type: ", type(test_labels))
print("test_images shape: ", test_images.shape)
print("test_labels shape: ", test_labels.shape)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
predictions = model.predict(test_x)
print("AAAAAAAAAAAAA")

cm = confusion_matrix(y_true=test_y, y_pred=np.argmax(predictions,axis=1))
print("BBBBBBBBB")

print(cm)
print("CCCCCCCCC")

plot_images(test_x[:9], test_y[:9], model.predict(test_x[:9]), class_names)




tf.keras.models.save_model(model, 'D:/Project_DF/Vception_Classifier_retrain.h5')
