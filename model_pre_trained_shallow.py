# -*- coding: utf-8 -*-
"""Model_pre-trained-Xception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CFGbhDM7HSgL0Jr90rf25-kP5CuQXF5
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from tensorflow import keras

from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os


##I extract images from the folders and create the dataset train_x



train_datagen = ImageDataGenerator(
        rescale=1./255,
        fill_mode='nearest',
        validation_split=0.2)

test_datagen = ImageDataGenerator(rescale=1 / 255.0)

train_generator = train_datagen.flow_from_directory(
        'D:/Project_DF/FaceRecogRefSoft/croppedfaces',
        target_size=(180, 180),
        batch_size=32,
        class_mode='categorical',
        subset='training') #set as training data

validation_generator = train_datagen.flow_from_directory(
    'D:/Project_DF/FaceRecogRefSoft/croppedfaces', #same directory as training data
    target_size=(180, 180),
    batch_size=32,
    class_mode='categorical',
    subset='validation',
    shuffle=False
    ) #set as validation data

test_generator = test_datagen.flow_from_directory(
    directory='D:/Project_DF/FaceRecogRefSoft/croppedfacesTest',
    target_size=(180, 180),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)



num_classes = 13

#######CREATION OF THE MODEL#################
model = keras.models.Sequential([
    keras.layers.Conv2D(filters=32, kernel_size=[3,3], activation='relu', input_shape=[180, 180,3]),
    keras.layers.MaxPool2D(pool_size=[2,2]),
    keras.layers.Conv2D(filters=16, kernel_size=[2,2], activation='relu'),
    keras.layers.MaxPool2D(pool_size=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(num_classes, activation="softmax")
  ])

# compile the model
model.compile(optimizer='adam', metrics=['accuracy'], loss='categorical_crossentropy')

#balance class weights for imbalanced classes
#https://stackoverflow.com/questions/42586475/is-it-possible-to-automatically-infer-the-class-weight-from-flow-from-directory

from collections import Counter

counter = Counter(validation_generator.classes) 
print("counter", counter)                         
max_val = float(max(counter.values()))       
class_weights = {class_id : max_val/num_images for class_id, num_images in counter.items()} 
print("class weights:", class_weights)

callback = tf.keras.callbacks.EarlyStopping(monitor="val_loss", patience=2)

# train the model on the new data for a few epochs
history = model.fit(
      x=train_generator,
      epochs=10,
      validation_data=validation_generator,
      verbose=1,
      class_weight = class_weights,
      callbacks=[callback])


# save the model
tf.keras.models.save_model(model, 'D:/Project_DF/shallow_trained_model.h5')


#Test the model with the test set and print confusion matrix
predict=model.predict_generator(test_generator)
y_classes = np.argmax(predict, axis=1)
print(test_generator.classes)

import seaborn as sn
import pandas as pd
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(test_generator.classes, y_classes)
print(cm)

class_names = ['Adam Sandler','Alyssa Milano', 'Bruce Willis', 'Denise Richards', 'George Clooney', 'Gwyneth Paltrow', 'Hugh Jackman', 'Jason Statham', 'Jennifer Love Hewitt', 'Lindsay Lohan', 'Mark Ruffalo', 'Robert Downey Jr', 'Will Smith']
df_cm = pd.DataFrame(cm, index = class_names, columns = class_names)

sn.set(font_scale=1.0) # Adjust to fit

plt.figure(figsize = (15,10))
sn.heatmap(df_cm, annot=True, cmap='Blues')
plt.axis([-0.5, 13.5, 13.5, -0.5])
plt.title('Confusion Matrix Test Set')
plt.xlabel('Predicted')
plt.ylabel('True')## Display the visualization of the Confusion Matrix.
plt.show()


